# ---------------------------------------------------------
# ðŸ§µ GTFSWeaver Commit Template
# ---------------------------------------------------------
# Commit message format (Conventional Commits):
#
# <type>(optional scope): <short summary>
#
# [blank line]
# <detailed body>
#
# [blank line]
# <footer>
#
# ---------------------------------------------------------
# ðŸ’¡ Common types:
#   feat      â†’  a new feature
#   fix       â†’  a bug fix
#   refactor  â†’  code restructuring, no behavior change
#   docs      â†’  documentation changes only
#   style     â†’  formatting, naming, imports, whitespace
#   test      â†’  add or modify tests
#   build     â†’  packaging, dependencies, CI/CD configs
#   chore     â†’  maintenance tasks or meta changes
#   perf      â†’  performance improvements
#
# Common scopes:
#   protofeed, validators, main, routing, constants, docs, cli
#
# Example:
#   feat(protofeed): add timetable.csv parser (Option A)
#
# ---------------------------------------------------------
# The first line is the subject line:
#   * limit to 72 characters
#   * use imperative mood ("add", "fix", "refactor", not "added")
#   * no period at the end
# ---------------------------------------------------------

# <type>(scope): <summary>
# ---------------------------------------------------------

# Example:
# feat(validators): add timetable schema and validation

# ---------------------------------------------------------
# BODY: Explain WHAT and WHY (not HOW)
# Wrap lines at ~72 characters.
# Describe the motivation, context, and impact.
# Mention major design decisions or side effects.
# ---------------------------------------------------------

# Example:
# Introduces schema validation for timetable.csv (Option A).
# Validates required fields (dow, start_time, end_time, headway_min)
# and cross-checks shape_id with lines.geojson.
#
# Removes legacy service_windows.csv parsing in favor of unified model.

# ---------------------------------------------------------
# FOOTER: References and breaking changes
# Use to close issues or describe breaking API changes.
# ---------------------------------------------------------

# Closes #42
# BREAKING CHANGE: renamed field frequency â†’ headway_min

# ---------------------------------------------------------
# Tips:
#   * Keep commits atomic (one logical change per commit)
#   * Use rebase or squash before merging to keep history clean
#   * Run tests before committing
# ---------------------------------------------------------
